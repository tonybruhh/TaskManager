services:

  db:
    image: postgres:16
    container_name: tm-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: $(POSTGRES_DB)
      POSTGRES_USER: $(POSTGRES_USER)
      POSTGRES_PASSWORD: $(POSTGRES_PASSWORD)
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data

  redis:
    image: redis:7-alpine
    container_name: tm-redis
    restart: unless-stopped
    command: ["redis-server","--appendonly","yes","--requirepass","${REDIS_PASSWORD}"]
    volumes:
      - redisdata:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "PING"]
      interval: 10s
      timeout: 3s
      retries: 5


  api:
    build: 
      context: .
      dockerfile: TaskManager.Api/dockerfile
    container_name: tm-api
    depends_on:
      db:
        condition: service_started
      redis: 
        condition: service_healthy
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
      ASPNETCORE_URLS: ${ASPNETCORE_URLS}
      ConnectionStrings__Postgres: Host=db;Port=5432;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      ConnectionStrings__Redis: redis:6379,password=${REDIS_PASSWORD},abortConnect=false
      JWT__Key: ${JWT__Key}
      JWT__Issuer: ${JWT__Issuer}
      JWT__Audience: ${JWT__Audience}
      JWT__ExpiresMinutes: ${JWT__ExpiresMinutes}
      DataProtection__AppName: ${DataProtection__AppName}
      DataProtection__KeyLifetimeDays: ${DataProtection__KeyLifetimeDays}
      DataProtection__Cert__PfxPath: ./cert/dpkeys.pfx
      DataProtection__Cert__PfxPassword: PfxPassword
    ports:
      - "8080:8080"


volumes:
  pgdata:
  redisdata: